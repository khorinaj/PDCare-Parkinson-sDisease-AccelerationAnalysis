function label=extractLabelsBody(ID,window,filename)
%
% Description:
% This function processes activity predictions generated by a machine learning model
% (trained in Python) and aligns them with time-series data collected from 
% a participant's trunk sensor. The predictions are processed into numeric activity labels 
% and assigned to the sensor data based on a specified time window size.
% The resulting aligned labels are appended to the participant's preprocessed data file.
%
% Inputs:
% - ID: (string) Participant ID (e.g., "23").
% - window: (numeric) Window size in seconds, matching the window size used during model training.
% - filename: (string) Path to the file containing predicted activity labels from the Python model.
%
% Outputs:
% - label: (numeric array) Numeric activity labels aligned with the time-series data.
%   Note: The labels are also saved to the participant's preprocessed file for future use.
%
% Example Usage:
% extractLabelsBody('23', 10, 'results/ID23_predicted_labels.csv');
%
% Dependencies:
% - Requires the corresponding preprocessed data file for the participant to exist 
%   in the 'dataProcessed_Body' directory.
% - Assumes the predictions file (CSV) contains a column named "Prediction" with activity labels.


% Load the preprocessed file for the participant
matName = strcat('ID', ID, '_processed');
load(fullfile('dataProcessed_Body',matName), 'timeNorm','datause');  % Load normalized time variable

% Calculate the sampling frequency (fs) from timeNorm
fs = 1 / (timeNorm(2) - timeNorm(1));

% Define window boundaries for the given window size
idx = 1:(window * fs):length(datause);
if idx(end) ~= length(datause)
    idx = [idx, length(datause)];
end

%-----------------------------------------------------------------
% Load predictions from a file (filename must be defined elsewhere)
allPredictions = readtable(filename);  % Read predictions from a table
allPredictions = string(allPredictions.Prediction);  % Convert to string array

% Define activity types and their numeric labels
%typesActivity=unique(allPredictions);
typesActivity = ["Walking", "Sit\Stand", "Lying", "Other"];  % Activity categories
yfit = zeros(size(allPredictions));  % Initialize numeric labels
for j = 1:length(typesActivity)
    yfit(allPredictions == typesActivity(j)) = j;  % Map activities to numeric labels
end

% Initialize the label array to align with the data size
label = zeros(length(datause), 1);

% Assign labels to each window by taking the mode of the predictions within it
for j = 1:(length(idx) - 1)
    time_Range = idx(j):(idx(j + 1) - 1);  % Define time range for the window
    label(time_Range) = repmat(mode(yfit(j, :)), length(time_Range), 1);  % Assign the mode label
end

% Handle the edge case for the last label
label(end) = label(end - 1);

% Save the resulting labels back into the preprocessed file
save(fullfile('dataProcessed_Body',matName), 'label', '-append');  % Append the new labels to the file

fprintf('Saved labels for ID %s in %s.\n' , ID, fullfile('dataProcessed_Body',matName));
end